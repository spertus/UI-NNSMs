24000/3e6
baseline_data <- read_excel("saj220260-sup-0002-suppmat_JVSedits.xlsx", sheet = "Baseline")
library(tidyverse)
library(readxl)
baseline_data <- read_excel("saj220260-sup-0002-suppmat_JVSedits.xlsx", sheet = "Baseline")
paired_data <- read_excel("saj220260-sup-0002-suppmat_JVSedits.xlsx", sheet = "Paired")
library(tidyverse)
library(readxl)
baseline_data <- read_excel("saj220260-sup-0002-suppmat_JVSedits.xlsx", sheet = "Baseline")
paired_data <- read_excel("saj220260-sup-0002-suppmat_JVSedits.xlsx", sheet = "Paired")
glimpse(baseline_data)
baseline_data <- read_excel("saj220260-sup-0002-suppmat_JVSedits.xlsx", sheet = "Baseline")
paired_data <- read_excel("saj220260-sup-0002-suppmat_JVSedits.xlsx", sheet = "Paired")
glimpse(baseline_data)
154.16 + 151.79 + 204.34
2 - 1/0.51
2 - 1/0.75
10000 * 1.03
(10000 * 1.03) * 1.03
10000 * 1.03^5
1 / .49
1  / (2 - 2 * .49 + 1)
1  / (2 - 2 * .51 + 1)
1  / (2 - 2 * .505 + 1)
1  / (2 - 2 * .8 + 1)
1  / (2 - 2 * .9 + 1)
A_c <- seq(0.1, 0.9)
v <- 2 * A_c - 1
v
A_c <- seq(0.1, 0.9,  by = .01)
v <- 2 * A_c - 1
v
a <- 1 / (2 - v)
a
plot(a)
plot(a ~ A_c)
A_c_1 <- .1
A_c_2 <- .95
a_1 <- 1 / (2 - (2 * A_c_1 - 1))
a_1
a_2 <- 1 / (2 - (2 * A_c_2 - 1))
mean(c(a_1, a_2))
A_c_2 <- .9
a_2 <- 1 / (2 - (2 * A_c_2 - 1))
mean(c(a_1, a_2))
point_mass_stopping_times <- read_csv("point_mass_results.csv") %>%
filter(method != "uinnsm_fisher") %>%
filter(delta != 0.1) %>%
filter(allocation != "larger_means") %>%
filter(bet != "smooth_predictable") %>%
mutate(method = case_match(method, "lcb" ~ "LCB", "uinnsm_fisher" ~ "UI-TS Fisher",  "uinnsm_product" ~ "UI-TS")) %>%
mutate(method = factor(method, levels = c("UI-TS", "LCB"))) %>%
mutate(bet = case_match(bet, "agrapa" ~ "AGRAPA", "fixed_predictable" ~ "Predictable plug-in", "inverse" ~ "Inverse", "smooth_predictable" ~ "Negative exponential")) %>%
mutate(allocation = case_match(allocation,"greedy_kelly" ~ "Greedy",  "predictable_kelly" ~ "Predictable Kelly", "round_robin" ~ "Round robin", "larger_means" ~ "Larger means")) %>%
mutate(sample_size = ifelse(allocation == "Greedy", stopping_time, sample_size)) %>%
mutate(delta_long = paste("Stratum gap =", delta))
library(tidyverse)
library(latex2exp)
library(xtable)
obj <- function(eta, mu_1, mu_2){
eta/(1-eta) - (mu_1/mu_2)
}
get_eta_star <- Vectorize(function(mu_1, mu_2){
uniroot(obj, mu_1 = mu_1, mu_2 = mu_2, lower = 1e-5, upper = 1 - 1e-5)$root
}, c("mu_1", "mu_2"))
alpha <- 0.05
kelly_optimal_stopping_times <- point_mass_stopping_times %>%
#filter(method == "UI-TSM Product", bet == "Fixed", allocation == "Round Robin") %>%
mutate(mu_1 = alt - delta/2, mu_2 = alt + delta/2) %>%
mutate(eta_star = get_eta_star(mu_1, mu_2)) %>%
mutate(kost = ceiling(log(alpha) / (log(eta_star) - log(mu_1))))
point_mass_stopping_times <- read_csv("point_mass_results.csv") %>%
filter(method != "uinnsm_fisher") %>%
filter(delta != 0.1) %>%
filter(allocation != "larger_means") %>%
filter(bet != "smooth_predictable") %>%
mutate(method = case_match(method, "lcb" ~ "LCB", "uinnsm_fisher" ~ "UI-TS Fisher",  "uinnsm_product" ~ "UI-TS")) %>%
mutate(method = factor(method, levels = c("UI-TS", "LCB"))) %>%
mutate(bet = case_match(bet, "agrapa" ~ "AGRAPA", "fixed_predictable" ~ "Predictable plug-in", "inverse" ~ "Inverse", "smooth_predictable" ~ "Negative exponential")) %>%
mutate(allocation = case_match(allocation,"greedy_kelly" ~ "Greedy",  "predictable_kelly" ~ "Predictable Kelly", "round_robin" ~ "Round robin", "larger_means" ~ "Larger means")) %>%
mutate(sample_size = ifelse(allocation == "Greedy", stopping_time, sample_size)) %>%
mutate(delta_long = paste("Stratum gap =", delta))
#Kelly optimal stopping time for point mass populations
#add lower bound to stopping time plots
obj <- function(eta, mu_1, mu_2){
eta/(1-eta) - (mu_1/mu_2)
}
get_eta_star <- Vectorize(function(mu_1, mu_2){
uniroot(obj, mu_1 = mu_1, mu_2 = mu_2, lower = 1e-5, upper = 1 - 1e-5)$root
}, c("mu_1", "mu_2"))
alpha <- 0.05
kelly_optimal_stopping_times <- point_mass_stopping_times %>%
#filter(method == "UI-TSM Product", bet == "Fixed", allocation == "Round Robin") %>%
mutate(mu_1 = alt - delta/2, mu_2 = alt + delta/2) %>%
mutate(eta_star = get_eta_star(mu_1, mu_2)) %>%
mutate(kost = ceiling(log(alpha) / (log(eta_star) - log(mu_1))))
####### stopping times for point mass distributions #######
point_mass_stopping_times <- read_csv("point_mass_results.csv") %>%
filter(method != "uinnsm_fisher") %>%
filter(delta != 0.1) %>%
filter(allocation != "larger_means") %>%
filter(bet != "smooth_predictable") %>%
mutate(method = case_match(method, "lcb" ~ "LCB", "uinnsm_fisher" ~ "UI-TS Fisher",  "uinnsm_product" ~ "UI-TS")) %>%
mutate(method = factor(method, levels = c("UI-TS", "LCB"))) %>%
mutate(bet = case_match(bet, "agrapa" ~ "AGRAPA", "fixed_predictable" ~ "Predictable plug-in", "inverse" ~ "Inverse", "smooth_predictable" ~ "Negative exponential")) %>%
mutate(allocation = case_match(allocation,"greedy_kelly" ~ "Greedy",  "predictable_kelly" ~ "Predictable Kelly", "round_robin" ~ "Round robin", "larger_means" ~ "Larger means")) %>%
mutate(sample_size = ifelse(allocation == "Greedy", stopping_time, sample_size)) %>%
mutate(delta_long = paste("Stratum gap =", delta))
setwd("~/Dropbox/RLAs/UI-NNSMs/Code")
####### stopping times for point mass distributions #######
point_mass_stopping_times <- read_csv("point_mass_results.csv") %>%
filter(method != "uinnsm_fisher") %>%
filter(delta != 0.1) %>%
filter(allocation != "larger_means") %>%
filter(bet != "smooth_predictable") %>%
mutate(method = case_match(method, "lcb" ~ "LCB", "uinnsm_fisher" ~ "UI-TS Fisher",  "uinnsm_product" ~ "UI-TS")) %>%
mutate(method = factor(method, levels = c("UI-TS", "LCB"))) %>%
mutate(bet = case_match(bet, "agrapa" ~ "AGRAPA", "fixed_predictable" ~ "Predictable plug-in", "inverse" ~ "Inverse", "smooth_predictable" ~ "Negative exponential")) %>%
mutate(allocation = case_match(allocation,"greedy_kelly" ~ "Greedy",  "predictable_kelly" ~ "Predictable Kelly", "round_robin" ~ "Round robin", "larger_means" ~ "Larger means")) %>%
mutate(sample_size = ifelse(allocation == "Greedy", stopping_time, sample_size)) %>%
mutate(delta_long = paste("Stratum gap =", delta))
#Kelly optimal stopping time for point mass populations
#add lower bound to stopping time plots
obj <- function(eta, mu_1, mu_2){
eta/(1-eta) - (mu_1/mu_2)
}
get_eta_star <- Vectorize(function(mu_1, mu_2){
uniroot(obj, mu_1 = mu_1, mu_2 = mu_2, lower = 1e-5, upper = 1 - 1e-5)$root
}, c("mu_1", "mu_2"))
alpha <- 0.05
kelly_optimal_stopping_times <- point_mass_stopping_times %>%
#filter(method == "UI-TSM Product", bet == "Fixed", allocation == "Round Robin") %>%
mutate(mu_1 = alt - delta/2, mu_2 = alt + delta/2) %>%
mutate(eta_star = get_eta_star(mu_1, mu_2)) %>%
mutate(kost = ceiling(log(alpha) / (log(eta_star) - log(mu_1))))
ggplot(point_mass_stopping_times %>% filter(n_bands == 100), aes(x = alt, y = sample_size, color = bet, linetype = method)) +
geom_line(size = 1.5) +
#geom_line(data = kelly_optimal_stopping_times, aes(y = kost), linetype = 'dashed', color = 'black') +
facet_grid(allocation ~ delta_long) +
theme_bw() +
theme(
text = element_text(size = 18),
axis.text = element_text(size = 14),
legend.key.width = unit(2, "cm"),
legend.text = element_text(size = 14),
panel.spacing.x = unit(6, "mm")) +
scale_linetype_manual(values = c("solid","dashed","dotted")) +
ylab("Sample Size") +
xlab("Global Mean") +
labs(colour = "Selection rule", linetype = "Method") +
scale_y_log10() +
scale_x_continuous(breaks = seq(0.5,0.75,by=0.05))
point_mass_stopping_times
